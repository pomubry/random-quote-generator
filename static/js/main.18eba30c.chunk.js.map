{"version":3,"sources":["quote.svg","githubIcon.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","author","content","href","quoteArr","color","activeColor","handleGenerate","e","preventDefault","index","Math","floor","random","length","setState","handleTweet","authorStr","replace","contentStr","console","log","fetch","then","res","json","data","results","this","className","style","backgroundColor","transition","id","src","quote","alt","onClick","rel","target","github","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,6MC+H5BC,E,4MA3HbC,MAAQ,CACNC,OAAQ,GACRC,QAAS,GACTC,KAAM,GACNC,SAAU,GACVC,MAAO,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,YAAa,I,EAkBfC,eAAiB,SAACC,GAChBA,EAAEC,iBADoB,MAEM,EAAKT,MAAzBI,EAFc,EAEdA,SAAUC,EAFI,EAEJA,MACdK,EAAQC,KAAKC,MAAMD,KAAKE,SAAWT,EAASU,QAChD,EAAKC,SAAS,CACZd,OAAQG,EAASM,GAAOT,OACxBC,QAASE,EAASM,GAAOR,QACzBI,YAAaD,EAAMM,KAAKC,MAAMD,KAAKE,SAAWR,EAAMS,Y,EAIxDE,YAAc,SAACR,GACb,IAAIS,EAAY,EAAKjB,MAAMC,OAAOiB,QAAQ,MAAO,OAC7CC,EAAa,EAAKnB,MAAME,QAAQgB,QAAQ,MAAO,OACnDE,QAAQC,IAAI,EAAKrB,MAAMG,MACvB,EAAKY,SAAS,CACZZ,KAAK,kCAAD,OAAoCgB,EAApC,mBAAyDF,M,kEA/B5C,IAAD,OAClBK,MAAM,iCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAU,IACPrB,EAAU,EAAKL,MAAfK,MACJK,EAAQC,KAAKC,MAAMD,KAAKE,SAAWa,EAAKC,QAAQb,QACpD,EAAKC,SAAS,CACZd,OAAQyB,EAAKC,QAAQjB,GAAOT,OAC5BC,QAASwB,EAAKC,QAAQjB,GAAOR,QAC7BE,SAAS,YAAKsB,EAAKC,SACnBrB,YAAaD,EAAMM,KAAKC,MAAMD,KAAKE,SAAWR,EAAMS,gB,+BAyBlD,IACAR,EAAgBsB,KAAK5B,MAArBM,YAER,OACE,yBACEuB,UAAU,MACVC,MAAO,CACLC,gBAAiBzB,EACjB0B,WAAY,kBAGd,gCACE,uDAEF,yBAAKH,UAAU,cAAcI,GAAG,aAC9B,yBAAKJ,UAAU,SACb,wBACEI,GAAG,OACHH,MAAO,CAAEzB,MAAOC,EAAa0B,WAAY,kBAEzC,yBAAKE,IAAKC,IAAOC,IAAI,QAAQP,UAAU,aAAc,IACpDD,KAAK5B,MAAME,SAEd,uBACE+B,GAAG,SACHH,MAAO,CAAEzB,MAAOC,EAAa0B,WAAY,gBAF3C,KAIKJ,KAAK5B,MAAMC,SAGlB,yBAAK4B,UAAU,WACb,4BACEQ,QAAST,KAAKrB,eACd0B,GAAG,YACHH,MAAO,CAAEC,gBAAiBzB,IAH5B,2BAOA,uBACEH,KAAMyB,KAAK5B,MAAMG,KACjBkC,QAAST,KAAKZ,YACdsB,IAAI,sBACJL,GAAG,cACHH,MAAO,CAAEC,gBAAiBzB,GAC1BiC,OAAO,UANT,sBAYJ,yBAAKV,UAAU,WACb,oDACA,uBACE1B,KAAK,6BACLoC,OAAO,SACPD,IAAI,uBAEJ,yBAAKJ,IAAKM,IAAQJ,IAAI,gBALxB,uB,GA9GQK,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.18eba30c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/quote.f0e9498d.svg\";","module.exports = __webpack_public_path__ + \"static/media/githubIcon.0a3a0978.svg\";","import React, { Component } from 'react';\nimport quote from './quote.svg';\nimport github from './githubIcon.svg';\nclass App extends Component {\n  state = {\n    author: '',\n    content: '',\n    href: '',\n    quoteArr: [],\n    color: [\n      '#ED4C67',\n      '#F79F1F',\n      '#1289A7',\n      '#D980FA',\n      '#B53471',\n      '#EE5A24',\n      '#009432',\n      '#0652DD',\n      '#9980FA',\n      '#833471',\n      '#EA2027',\n      '#5758BB',\n    ],\n    activeColor: '',\n  };\n\n  componentDidMount() {\n    fetch('http://api.quotable.io/quotes')\n      .then((res) => res.json())\n      .then((data) => {\n        const { color } = this.state;\n        let index = Math.floor(Math.random() * data.results.length);\n        this.setState({\n          author: data.results[index].author,\n          content: data.results[index].content,\n          quoteArr: [...data.results],\n          activeColor: color[Math.floor(Math.random() * color.length)],\n        });\n      });\n  }\n\n  handleGenerate = (e) => {\n    e.preventDefault();\n    const { quoteArr, color } = this.state;\n    let index = Math.floor(Math.random() * quoteArr.length);\n    this.setState({\n      author: quoteArr[index].author,\n      content: quoteArr[index].content,\n      activeColor: color[Math.floor(Math.random() * color.length)],\n    });\n  };\n\n  handleTweet = (e) => {\n    let authorStr = this.state.author.replace(/\\s/g, '%20');\n    let contentStr = this.state.content.replace(/\\s/g, '%20');\n    console.log(this.state.href);\n    this.setState({\n      href: `twitter.com/intent/tweet?text=\"${contentStr}\"%20-%20${authorStr}`,\n    });\n  };\n\n  render() {\n    const { activeColor } = this.state;\n\n    return (\n      <div\n        className=\"App\"\n        style={{\n          backgroundColor: activeColor,\n          transition: 'all 0.5s ease',\n        }}\n      >\n        <header>\n          <h1>Random Quote Generator</h1>\n        </header>\n        <div className=\"content-box\" id=\"quote-box\">\n          <div className=\"quote\">\n            <h2\n              id=\"text\"\n              style={{ color: activeColor, transition: 'all 0.5s ease' }}\n            >\n              <img src={quote} alt=\"quote\" className=\"quoteSVG\" />{' '}\n              {this.state.content}\n            </h2>\n            <p\n              id=\"author\"\n              style={{ color: activeColor, transition: 'all 1s ease' }}\n            >\n              - {this.state.author}\n            </p>\n          </div>\n          <div className=\"buttons\">\n            <button\n              onClick={this.handleGenerate}\n              id=\"new-quote\"\n              style={{ backgroundColor: activeColor }}\n            >\n              Generate a Random Quote\n            </button>\n            <a\n              href={this.state.href}\n              onClick={this.handleTweet}\n              rel=\"noopener noreferrer\"\n              id=\"tweet-quote\"\n              style={{ backgroundColor: activeColor }}\n              target=\"_blank\"\n            >\n              Tweet this Quote\n            </a>\n          </div>\n        </div>\n        <div className=\"credits\">\n          <p>Designed and Coded By</p>\n          <a\n            href=\"https://github.com/pomubry\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img src={github} alt=\"github icon\" />\n            Bryan Taduran\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}